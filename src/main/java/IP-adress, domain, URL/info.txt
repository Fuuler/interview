web.mail.ru, google.com.ua, new.books.amazon.com - Такое имя называется доменом.

Для того чтобы такой интернет работал правильно, была придумана специальная таблица –
DNS (Domain Name System), в которой для каждого доменного имени хранился его IP-адрес.
Вот как это работает.
1) Пользователь вводит в браузере адрес, например, web.mail.ru.
2) Браузер обращается к DNS и по доменному имени получает IP-адрес.
3) По этому IP-адресу отправляется запрос, содержащий нужную ссылку (URL).

у такого подхода есть и несколько преимуществ:
1) Люди легко запоминают словесные имена.
2) Доменные имена можно строить в виде дерева, добавляя в начале имени поддомены. Точь-в-точь, как package в Java.
3) Если надо сменить IP-адрес веб-сервера, то достаточно поменять запись в DNS,
 и все будет работать как раньше, а пользователям не придется учить новый адрес.

Domain Name	       IP-Address
mail.ru	           128.35.36.189
web.mail.ru	       145.12.17.13
new.mail.ru	       192.155.15.3
google.com	       92.117.151.100
google.ru	       193.168.0.1
docs.google.com	   217.12.222.1


url – это просто некоторая уникальная ссылка с параметрами.
Разбор ссылки
http://javarush.ru/alpha/api/contacts?userid=13&filter=none&page=3
Описание частей ссылки
http — это протокол (стандарт) взаимодействия клиента и сервера
javarush.ru – это домен — уникальное имя (адрес) компьютера в интернете
alpha/api/contacts – запрос к веб-серверу / запрос веб-страницы на сервере
userid=13 & filter=none & page=3 – параметры запроса

HTTP – это HyperTextTransportProtocol – протокол для передачи гипертекста.
— А что такое гипертекст?
— Это HTML.
Протокол, это грубо говоря, стандарт взаимодействия. В нем описано, какие запросы можно посылать веб-серверу и в каком формате, и как этот веб-сервер должен отвечать.
Вкратце дело обстоит таким образом. Между клиентом и сервером пересылаются обычные текстовые файлы, ну, или если хочешь – большие куски текста.
К серверу приходит запрос (request), и на каждый запрос сервер отдает ответ (response).

Вот примеры таких запроса и ответа:
Запрос (Request)
GET alpha/api/contacts HTTP/1.1
Host: javarush.ru
User-Agent: Mozilla/5.0 (X11; U; Linux i686; ru; rv:1.9b5) Gecko/2008050509 Firefox/3.0b5
Accept: text/html
Connection: close

Описание
GET – подтип запроса
alpha/api/contacts – запрос к веб-серверу
HTTP/1.1 – версия протокола – HTTP/1.1
Host: javarush.ru – доменное имя
User-Agent: Mozilla/5… – уникальное имя браузера
Accept: text/html – тип запрашиваемого документа: HTML
Connection: close – закрыть соединение сервером, после обработки запроса.
Первая строка – это фактически запрос. Затем идут дополнительные параметры запроса, так называемые «заголовки запроса» (Headers).

А вот и пример ответа:
Ответ (Response)
HTTP/1.1 200 OK
Date: Wed, 11 Feb 2009 11:20:59 GMT
Server: Apache
X-Powered-By: PHP/5.2.4-2ubuntu5wm1
Last-Modified: Wed, 11 Feb 2009 11:20:59 GMT
Content-Language: ru
Content-Type: text/html; charset=utf-8
Content-Length: 1234
Connection: close
<html><body><a href="http://ample.com/about.html#contacts">Click here</a></body></html>

HTTP/1.1 200 OK - Ответ «200 ОК» - все хорошо.
Date: Wed, 11 Feb 2009 - Дата обработки запроса
Server: Apache - Имя веб-сервера
X-Powered-By: PHP - Сервер работает на языке PHP
Last-Modified: Wed, 11 Feb 2009 - Время последнего обновления запрашиваемого файла
Content-Language: ru - Язык файла
Content-Type: text/html; charset=utf-8 – Ответ – это HTML-файл в UTF-8 кодировке
Content-Length: 1234 - Длина ответа – 1234 байта
Connection: close - Соединение будет закрыто после обработки запроса
<html><body><a href="http://ample - Сам HTML-файл.

В соответствии с протоколом HTTP, Cookie – это маленькие кусочки информации, которые сервер отправляет клиенту,
чтобы тот хранил их у себя. И при следующих запросах передавал их обратно к серверу.
— Например, пользователь авторизовался на главной странице сайта, тогда сервер создает объект сессии на сервере
для этого пользователя, а уникальный номер этой сессии передает клиенту в виде Cookie.
При следующем запросе от клиента к серверу, этот номер сессии, вместе с другими Cookie,
опять будет отправлен на сервер. Таким образом, сервер узнает пользователя, который отправил ему этот новый запрос.

